//! This file is autogenerated. See build.rs for how!
use crate::op::helpers::{Context, FromArgs, Transform};
use crate::op::ops as x;
use std::io::Result;
use std::path::Path;

#[derive(Debug, PartialEq)]
pub enum OpCode {
    Empty,
    Import,
    Export,
    Merge,
    Filter,
    Replace,
    Prefix,
    Download,
    DownloadImpure,
    CmdImpure,
}

pub fn to_opcode(arg: impl AsRef<str>) -> Option<OpCode> {
    match arg.as_ref() {
        "--empty" => Some(OpCode::Empty),
        "--import" => Some(OpCode::Import),
        "--export" => Some(OpCode::Export),
        "--merge" => Some(OpCode::Merge),
        "--filter" => Some(OpCode::Filter),
        "--replace" => Some(OpCode::Replace),
        "--prefix" => Some(OpCode::Prefix),
        "--download" => Some(OpCode::Download),
        "--download-impure" => Some(OpCode::DownloadImpure),
        "--cmd-impure" => Some(OpCode::CmdImpure),
        _ => None,
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum Op {
    Empty(x::empty::Empty),
    Import(x::import::Import),
    Export(x::export::Export),
    Merge(x::merge::Merge),
    Filter(x::filter::Filter),
    Replace(x::replace::Replace),
    Prefix(x::prefix::Prefix),
    Download(x::download::Download),
    DownloadImpure(x::download_impure::DownloadImpure),
    CmdImpure(x::cmd_impure::CmdImpure),
}

impl Op {
    #[rustfmt::skip]
    pub fn from_code_and_params(oc: OpCode, params: Vec<String>) -> Result<Op> {
        Ok(match oc {
            OpCode::Empty => Op::Empty(x::empty::Empty::from_args(params)?),
            OpCode::Import => Op::Import(x::import::Import::from_args(params)?),
            OpCode::Export => Op::Export(x::export::Export::from_args(params)?),
            OpCode::Merge => Op::Merge(x::merge::Merge::from_args(params)?),
            OpCode::Filter => Op::Filter(x::filter::Filter::from_args(params)?),
            OpCode::Replace => Op::Replace(x::replace::Replace::from_args(params)?),
            OpCode::Prefix => Op::Prefix(x::prefix::Prefix::from_args(params)?),
            OpCode::Download => Op::Download(x::download::Download::from_args(params)?),
            OpCode::DownloadImpure => Op::DownloadImpure(x::download_impure::DownloadImpure::from_args(params)?),
            OpCode::CmdImpure => Op::CmdImpure(x::cmd_impure::CmdImpure::from_args(params)?),
        })
    }
}

impl Transform for Op {
    fn transform<P>(&self, ctx: &mut Context<P>) -> Result<()>
    where
        P: AsRef<Path>,
    {
        match self {
            Op::Empty(t) => t.transform(ctx),
            Op::Import(t) => t.transform(ctx),
            Op::Export(t) => t.transform(ctx),
            Op::Merge(t) => t.transform(ctx),
            Op::Filter(t) => t.transform(ctx),
            Op::Replace(t) => t.transform(ctx),
            Op::Prefix(t) => t.transform(ctx),
            Op::Download(t) => t.transform(ctx),
            Op::DownloadImpure(t) => t.transform(ctx),
            Op::CmdImpure(t) => t.transform(ctx),
        }
    }

    fn header_name(&self) -> &'static str {
        match self {
            Op::Empty(_) => "Empty",
            Op::Import(_) => "Import",
            Op::Export(_) => "Export",
            Op::Merge(_) => "Merge",
            Op::Filter(_) => "Filter",
            Op::Replace(_) => "Replace",
            Op::Prefix(_) => "Prefix",
            Op::Download(_) => "Download",
            Op::DownloadImpure(_) => "DownloadImpure",
            Op::CmdImpure(_) => "CmdImpure",
        }
    }
}
